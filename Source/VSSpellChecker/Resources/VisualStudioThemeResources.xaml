<ResourceDictionary x:Uid="VisualStudioThemeResources"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:s="clr-namespace:System;assembly=mscorlib"
	xmlns:vsst="clr-namespace:VisualStudio.SpellChecker.Theme"
	xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

	<!-- Element brushes -->
	<SolidColorBrush x:Key="ButtonBackgroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonBackgroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonBorderColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonForegroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonForegroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonDisabledBackgroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonDisabledBackgroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonDisabledBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonDisabledBorderColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonDisabledForegroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonDisabledForegroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonHoverBackgroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonHoverBackgroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonHoverBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonHoverBorderColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonHoverForegroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonHoverForegroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonPressedBackgroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonPressedBackgroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonPressedBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonPressedBorderColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ButtonPressedForegroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ButtonPressedForegroundColor, Mode=OneWay}" />

	<SolidColorBrush x:Key="CheckBoxFillNormal" Color="#F4F4F4"/>
	<SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F"/>

	<SolidColorBrush x:Key="ComboBoxButtonMouseOverBackgroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ComboBoxButtonMouseOverBackgroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ComboBoxDisabledGlyphBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ComboBoxDisabledGlyphColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ComboBoxGlyphBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ComboBoxGlyphColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ComboBoxPopupBackgroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ComboBoxPopupBackground, Mode=OneWay}" />

	<SolidColorBrush x:Key="DisabledTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=DisabledTextColor, Mode=OneWay}" />

	<SolidColorBrush x:Key="ItemBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemTextColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemBorderColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemSelectedBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemSelectedColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemSelectedTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemSelectedTextColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemSelectedBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemSelectedBorderColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemSelectedNotFocusedBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemSelectedNotFocusedColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemSelectedTextNotFocusedBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemSelectedTextNotFocusedColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemSelectedBorderNotFocusedBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemSelectedBorderNotFocusedColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemHoverBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemHoverColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemHoverTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemHoverTextColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ItemHoverBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ItemHoverBorderColor, Mode=OneWay}" />

	<SolidColorBrush x:Key="LightBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=LightBorderColor, Mode=OneWay}" />

	<SolidColorBrush x:Key="LinkTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=LinkTextColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="LinkTextHoverBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=LinkTextHoverColor, Mode=OneWay}" />

	<SolidColorBrush x:Key="MenuBackgroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=MenuBackgroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="MenuBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=MenuBorderColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="MenuTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=MenuTextColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="MenuSeparatorBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=MenuSeparatorColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="MenuHoverBackgroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=MenuHoverBackgroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="MenuHoverTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=MenuHoverTextColor, Mode=OneWay}" />

	<SolidColorBrush x:Key="NotificationBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=NotificationColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="NotificationTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=NotificationTextColor, Mode=OneWay}" />

	<SolidColorBrush x:Key="TextBoxBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=TextBoxColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="TextBoxTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=TextBoxTextColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="TextBoxBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=TextBoxBorderColor, Mode=OneWay}" />

	<SolidColorBrush x:Key="ToolWindowBackgroundBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ToolWindowBackgroundColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ToolWindowBorderBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ToolWindowBorderColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="ToolWindowTextBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=ToolWindowTextColor, Mode=OneWay}" />

	<SolidColorBrush x:Key="TreeViewGlyphBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=TreeViewGlyphColor, Mode=OneWay}" />
	<SolidColorBrush x:Key="TreeViewHoverGlyphBrushKey" Color="{Binding Source={x:Static vsst:ThemeColors.Instance}, Path=TreeViewHoverGlyphColor, Mode=OneWay}" />

	<!-- Shared focus visual styles -->
	<Style x:Key="ButtonFocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle SnapsToDevicePixels="True" Margin="2" Stroke="{StaticResource ItemTextBrushKey}" StrokeDashArray="1 2" StrokeThickness="1" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CheckRadioFocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{StaticResource ToolWindowTextBrushKey}" StrokeThickness="1" StrokeDashArray="1 2" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DashedRectangleFocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle SnapsToDevicePixels="True" Margin="0" Stroke="{StaticResource ToolWindowTextBrushKey}" StrokeDashArray="1 2" StrokeThickness="1" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="EmptyCheckBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="1" SnapsToDevicePixels="True" Stroke="{StaticResource ToolWindowTextBrushKey}" StrokeThickness="1" StrokeDashArray="1 2" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Text block styles -->
	<Style x:Key="NotificationText" TargetType="{x:Type TextBlock}">
		<Setter Property="TextBlock.Background" Value="{StaticResource NotificationBrushKey}" />
		<Setter Property="TextBlock.Foreground" Value="{StaticResource NotificationTextBrushKey}" />
	</Style>
	<Style x:Key="TitleText" TargetType="{x:Type TextBlock}">
		<Setter Property="TextBlock.FontWeight" Value="Bold" />
		<Setter Property="TextBlock.FontSize" Value="15" />
		<Setter Property="TextBlock.Foreground" Value="{StaticResource ToolWindowTextBrushKey}" />
	</Style>

	<!-- General controls -->
	<Style x:Key="{x:Type Border}" TargetType="{x:Type Border}">
		<Setter Property="Border.Background" Value="{StaticResource ToolWindowBackgroundBrushKey}" />
		<Setter Property="Control.Foreground" Value="{StaticResource ToolWindowTextBrushKey}" />
	</Style>
	<Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
		<Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisualStyle}" />
		<Setter Property="FrameworkElement.MinHeight" Value="23" />
		<Setter Property="Control.Background" Value="{StaticResource ButtonBackgroundBrushKey}" />
		<Setter Property="Control.Foreground" Value="{StaticResource ButtonForegroundBrushKey}" />
		<Setter Property="Control.BorderBrush" Value="{StaticResource ButtonBorderBrushKey}" />
		<Setter Property="Control.BorderThickness" Value="1" />
		<Setter Property="Control.HorizontalContentAlignment" Value="Center" />
		<Setter Property="Control.VerticalContentAlignment" Value="Center" />
		<Setter Property="Control.Padding" Value="6,0,6,0" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Name="ContentContainer" SnapsToDevicePixels="True" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
						<ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" RecognizesAccessKey="True" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="UIElement.IsKeyboardFocused" Value="True">
				<Setter Property="Control.Background" Value="{StaticResource ButtonHoverBackgroundBrushKey}" />
				<Setter Property="Control.Foreground" Value="{StaticResource ButtonHoverForegroundBrushKey}" />
				<Setter Property="Control.BorderBrush" Value="{StaticResource ButtonHoverBorderBrushKey}" />
			</Trigger>
			<Trigger Property="UIElement.IsMouseOver" Value="True">
				<Setter Property="Control.Background" Value="{StaticResource ButtonHoverBackgroundBrushKey}" />
				<Setter Property="Control.Foreground" Value="{StaticResource ButtonHoverForegroundBrushKey}" />
				<Setter Property="Control.BorderBrush" Value="{StaticResource ButtonHoverBorderBrushKey}" />
			</Trigger>
			<Trigger Property="Button.IsDefaulted" Value="True">
				<Setter Property="Control.Background" Value="{StaticResource ButtonBackgroundBrushKey}" />
				<Setter Property="Control.Foreground" Value="{StaticResource ButtonForegroundBrushKey}" />
				<Setter Property="Control.BorderBrush" Value="{StaticResource ButtonBorderBrushKey}" />
			</Trigger>
			<Trigger Property="ButtonBase.IsPressed" Value="True">
				<Setter Property="Control.Background" Value="{StaticResource ButtonPressedBackgroundBrushKey}" />
				<Setter Property="Control.Foreground" Value="{StaticResource ButtonPressedForegroundBrushKey}" />
				<Setter Property="Control.BorderBrush" Value="{StaticResource ButtonPressedBorderBrushKey}" />
			</Trigger>
			<Trigger Property="UIElement.IsEnabled" Value="False">
				<Setter Property="Control.Background" Value="{StaticResource ButtonDisabledBackgroundBrushKey}" />
				<Setter Property="Control.Foreground" Value="{StaticResource ButtonDisabledForegroundBrushKey}" />
				<Setter Property="Control.BorderBrush" Value="{StaticResource ButtonDisabledBorderBrushKey}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
		<Setter Property="Foreground" Value="{StaticResource ItemTextBrushKey}"/>
		<Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
		<Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
						<BulletDecorator.Bullet>
							<Themes:BulletChrome BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" IsChecked="{TemplateBinding IsChecked}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}"/>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisualStyle}"/>
							<Setter Property="Padding" Value="4,0,0,0"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource DisabledTextBrushKey}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
		<Setter Property="FrameworkContentElement.FocusVisualStyle" Value="{StaticResource DashedRectangleFocusVisualStyle}" />
		<Setter Property="TextElement.FontWeight" Value="Normal" />
		<Setter Property="TextElement.Foreground" Value="{StaticResource LinkTextBrushKey}" />
		<Setter Property="Inline.TextDecorations" Value="{x:Null}" />
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="ContentElement.IsMouseOver" Value="True" />
					<Condition Property="ContentElement.IsEnabled" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="TextElement.Foreground" Value="{StaticResource LinkTextHoverBrushKey}" />
				<Setter Property="Inline.TextDecorations" Value="Underline" />
			</MultiTrigger>
			<Trigger Property="TextElement.IsEnabled" Value="False">
				<Setter Property="TextElement.Foreground" Value="{StaticResource DisabledTextBrushKey}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
		<Setter Property="Control.Foreground" Value="{StaticResource ToolWindowTextBrushKey}" />
	</Style>
	<Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
		<Setter Property="Control.Background" Value="{StaticResource ItemBrushKey}"/>
		<Setter Property="Foreground" Value="{StaticResource ItemTextBrushKey}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
						<ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{StaticResource DisabledTextBrushKey}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsGrouping" Value="true"/>
								<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
		<Setter Property="FrameworkContentElement.FocusVisualStyle" Value="{StaticResource DashedRectangleFocusVisualStyle}" />
		<Setter Property="Control.Foreground" Value="{StaticResource ItemTextBrushKey}" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ItemHoverBrushKey}"/>
							<Setter Property="Foreground" Value="{StaticResource ItemHoverTextBrushKey}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ItemHoverBorderBrushKey}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelectionActive" Value="False"/>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ItemSelectedNotFocusedBrushKey}"/>
							<Setter Property="Foreground" Value="{StaticResource ItemSelectedTextNotFocusedBrushKey}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ItemSelectedBorderNotFocusedBrushKey}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelectionActive" Value="True"/>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ItemSelectedBrushKey}"/>
							<Setter Property="Foreground" Value="{StaticResource ItemSelectedTextBrushKey}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ItemSelectedBorderBrushKey}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{StaticResource DisabledTextBrushKey}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
		<Setter Property="Foreground" Value="{StaticResource ItemTextBrushKey}"/>
		<Setter Property="Background" Value="#F4F4F4"/>
		<Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Themes:BulletChrome BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" IsChecked="{TemplateBinding IsChecked}" IsRound="true" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}"/>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisualStyle}"/>
							<Setter Property="Padding" Value="4,0,0,0"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource DisabledTextBrushKey}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
		<Setter Property="TextBoxBase.CaretBrush" Value="{StaticResource TextBoxTextBrushKey}" />
		<Setter Property="Control.Foreground" Value="{StaticResource TextBoxTextBrushKey}" />
		<Setter Property="Control.Background" Value="{StaticResource TextBoxBrushKey}" />
		<Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxBorderBrushKey}" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBoxBase}">
					<Border Name="bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
						<ScrollViewer Name="PART_ContentHost" Margin="0" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="UIElement.IsEnabled" Value="False">
				<Setter Property="Control.Background" Value="{StaticResource ItemBrushKey}" />
				<Setter Property="Control.Foreground" Value="{StaticResource DisabledTextBrushKey}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Group box control -->
	<BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
	
	<Style x:Key="{x:Type GroupBox}" TargetType="{x:Type GroupBox}">
		<Setter Property="BorderBrush" Value="{StaticResource ToolWindowBorderBrushKey}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="6"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="6"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
							<RowDefinition Height="6"/>
						</Grid.RowDefinitions>
						<Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
						<Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
							<Border.OpacityMask>
								<MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
									<Binding ElementName="Header" Path="ActualWidth"/>
									<Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
									<Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
								</MultiBinding>
							</Border.OpacityMask>
							<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2">
								<Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
							</Border>
						</Border>
						<Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
							<ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
						<ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Tree view control -->
	<PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

	<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Width" Value="16"/>
		<Setter Property="Height" Value="16"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
						<Path x:Name="ExpandPath" Fill="Transparent" Stroke="{DynamicResource TreeViewGlyphBrushKey}"
							Data="{StaticResource TreeArrow}">
							<Path.RenderTransform>
								<RotateTransform Angle="135" CenterX="3" CenterY="3"/>
							</Path.RenderTransform>
						</Path>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewHoverGlyphBrushKey}"/>
							<Setter Property="Fill" TargetName="ExpandPath" Value="Transparent"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="RenderTransform" TargetName="ExpandPath">
								<Setter.Value>
									<RotateTransform Angle="180" CenterX="3" CenterY="3"/>
								</Setter.Value>
							</Setter>
							<Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewGlyphBrushKey}"/>
							<Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewGlyphBrushKey}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True" />
								<Condition Property="IsChecked" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewHoverGlyphBrushKey}"/>
							<Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewHoverGlyphBrushKey}"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type TreeView}" TargetType="{x:Type TreeView}">
		<Setter Property="Control.Background" Value="{StaticResource ItemBrushKey}" />
	</Style>
	<Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Control.Foreground" Value="{DynamicResource ItemTextBrushKey}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="19" Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>
						<ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
						<ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="false">
							<Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource ItemSelectedBrushKey}"/>
							<Setter Property="Foreground" Value="{DynamicResource ItemSelectedTextBrushKey}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="TreeViewItem.IsSelected" Value="False" />
								<Condition SourceName="Bd" Property="UIElement.IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bd" Value="{DynamicResource ItemHoverBrushKey}" Property="Border.Background" />
							<Setter Value="{DynamicResource ItemHoverTextBrushKey}" Property="Control.Foreground" />
						</MultiTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="true" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="false" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeView}}, Path=IsKeyboardFocusWithin}" Value="False" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="Bd" Value="{StaticResource ItemSelectedNotFocusedBrushKey}" Property="Border.Background" />
							<Setter Value="{StaticResource ItemSelectedTextNotFocusedBrushKey}" Property="Control.Foreground" />
						</MultiDataTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource DisabledTextBrushKey}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel/>
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Context menu controls -->
	<Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
		<Setter Property="Control.Background" Value="{StaticResource MenuBackgroundBrushKey}" />
		<Setter Property="Control.BorderBrush" Value="{StaticResource MenuBorderBrushKey}" />
		<Setter Property="Control.BorderThickness" Value="1" />
		<Setter Property="Control.Padding" Value="1" />
		<Setter Property="FrameworkElement.MinWidth" Value="126" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<Border BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}">
						<ScrollViewer ScrollViewer.CanContentScroll="True" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
							<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" Margin="{TemplateBinding Control.Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Grid.IsSharedSizeScope="True" />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
		<Setter Property="Control.Foreground" Value="{StaticResource MenuTextBrushKey}" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type MenuItem}">
					<Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="26" SharedSizeGroup="MenuItemIconColumnGroup" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="37" />
								<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemInputGestureColumnGroup" />
								<ColumnDefinition Width="17" />
							</Grid.ColumnDefinitions>
							<ContentPresenter Name="IconHost" ContentSource="Icon" Margin="2,1,4,1" Width="16" Height="16" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
							<Border Name="CheckMark" BorderBrush="{StaticResource MenuTextBrushKey}" BorderThickness="2" Margin="2,0,2,0" Visibility="Collapsed" Width="18" Height="18">
								<Path Width="16" Height="16" Fill="{StaticResource MenuTextBrushKey}" FlowDirection="LeftToRight" Data="F1M5,11L3,7 5,7 6,9 9,3 11,3 7,11 5,11z" />
							</Border>
							<ContentPresenter ContentSource="Header" Grid.Column="1" Margin="8,1,0,1" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
							<TextBlock Grid.Column="3" Text="{TemplateBinding MenuItem.InputGestureText}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="Center" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Value="{x:Null}" Property="MenuItem.Icon">
							<Setter TargetName="IconHost" Property="UIElement.Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="MenuItem.IsChecked" Value="True">
							<Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible" />
							<Setter TargetName="IconHost" Property="UIElement.Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="MenuItem.IsHighlighted" Value="True">
							<Setter Value="{StaticResource MenuHoverBackgroundBrushKey}" TargetName="Border" Property="Border.Background" />
							<Setter Value="{StaticResource MenuHoverTextBrushKey}" Property="Control.Foreground" />
						</Trigger>
						<Trigger Property="UIElement.IsEnabled" Value="False">
							<Setter Value="{StaticResource DisabledTextBrushKey}" Property="Control.Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" >
		<Setter Property="FrameworkElement.MinHeight" Value="2" />
		<Setter Property="FrameworkElement.MinWidth" Value="2" />
		<Setter Property="FrameworkElement.Margin" Value="0,2,0,2" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Grid SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="26" SharedSizeGroup="MenuItemIconColumnGroup" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Rectangle Height="1" Margin="4,0,1,0" Fill="{StaticResource MenuSeparatorBrushKey}" Grid.Column="1" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Flat ComboBox.  Based on a template by Hannes Kamecke: https://gist.github.com/hansmaad/9187633 -->
	<ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="20" />
			</Grid.ColumnDefinitions>
			<Border Grid.ColumnSpan="2" Name="Border" BorderBrush="{StaticResource TextBoxBorderBrushKey}" 
				CornerRadius="0" BorderThickness="1, 1, 1, 1" Background="{StaticResource TextBoxBrushKey}" />
			<Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="{StaticResource TextBoxBorderBrushKey}"
				Name="ButtonBorder" CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
        Background="{StaticResource TextBoxBrushKey}" />
			<Path Name="Arrow" Grid.Column="1" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" VerticalAlignment="Center"
				HorizontalAlignment="Center" Fill="{DynamicResource ComboBoxGlyphBrushKey}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="UIElement.IsMouseOver" Value="True">
				<Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{DynamicResource ComboBoxButtonMouseOverBackgroundBrushKey}"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{DynamicResource ComboBoxButtonMouseOverBackgroundBrushKey}"/>
			</Trigger>
			<Trigger Property="UIElement.IsEnabled" Value="False">
				<Setter Property="TextElement.Foreground" Value="{DynamicResource ComboBoxDisabledGlyphBrushKey}"/>
				<Setter Property="Shape.Fill" TargetName="Arrow" Value="{DynamicResource DisabledTextBrushKey}"/>
			</Trigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}, Path=IsKeyboardFocusWithin}" Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{DynamicResource ComboBoxButtonMouseOverBackgroundBrushKey}"/>
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
		<Setter Property="FrameworkContentElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisualStyle}" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="TextElement.Foreground" Value="Black"/>
		<Setter Property="Foreground" Value="{StaticResource TextBoxTextBrushKey}" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<Grid>
						<ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>
						<ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
              HorizontalAlignment="Left" VerticalAlignment="Center"                              
              Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
						<TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3" IsReadOnly="{TemplateBinding IsReadOnly}"
              Visibility="Hidden" Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center"
              Focusable="True">
							<TextBox.Template>
								<ControlTemplate TargetType="TextBox">
									<Border Name="PART_ContentHost" Focusable="False" />
								</ControlTemplate>
							</TextBox.Template>
						</TextBox>
						<!-- Pop up showing items -->
						<Popup Name="Popup" Placement="Bottom" Focusable="False" AllowsTransparency="True"
              IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" PopupAnimation="Slide">
							<Grid Name="DropDown" SnapsToDevicePixels="True"
								MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
								<Border Name="DropDownBorder" Background="{StaticResource ComboBoxPopupBackgroundBrushKey}"
									Margin="0, 1, 0, 0" CornerRadius="0" BorderThickness="1,1,1,1"
									BorderBrush="{StaticResource TextBoxBorderBrushKey}"/>
								<ScrollViewer Margin="4" SnapsToDevicePixels="True" Background="{StaticResource ComboBoxPopupBackgroundBrushKey}">
									<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="ItemsControl.HasItems" Value="False">
							<Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
						</Trigger>
						<Trigger Property="UIElement.IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" Value="{StaticResource LightBorderBrushKey}"/>
						</Trigger>
						<Trigger Property="ItemsControl.IsGrouping" Value="True">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
						</Trigger>
						<Trigger Property="ComboBox.IsEditable" Value="True">
							<Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
							<Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
							<Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource DashedRectangleFocusVisualStyle}" />
		<Setter Property="Foreground" Value="{StaticResource ItemTextBrushKey}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{StaticResource DisabledTextBrushKey}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsKeyboardFocused" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ItemHoverBrushKey}"/>
							<Setter Property="Foreground" Value="{StaticResource ItemHoverTextBrushKey}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ItemHoverBorderBrushKey}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsMouseOver" Value="False"/>
								<Condition Property="IsKeyboardFocused" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ItemSelectedBrushKey}"/>
							<Setter Property="Foreground" Value="{StaticResource ItemSelectedTextBrushKey}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ItemSelectedBorderBrushKey}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ItemSelectedBrushKey}"/>
							<Setter Property="Foreground" Value="{StaticResource ItemSelectedTextBrushKey}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ItemSelectedBorderBrushKey}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsMouseOver" Value="False"/>
								<Condition Property="IsKeyboardFocused" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ItemSelectedNotFocusedBrushKey}"/>
							<Setter Property="Foreground" Value="{StaticResource ItemSelectedTextNotFocusedBrushKey}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ItemSelectedBorderNotFocusedBrushKey}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="False"/>
								<Condition Property="IsKeyboardFocused" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ItemSelectedBrushKey}"/>
							<Setter Property="Foreground" Value="{StaticResource ItemSelectedTextBrushKey}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ItemSelectedBorderBrushKey}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsKeyboardFocused" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ItemSelectedBrushKey}"/>
							<Setter Property="Foreground" Value="{StaticResource ItemSelectedTextBrushKey}" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ItemSelectedBorderBrushKey}"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>
